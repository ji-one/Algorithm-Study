최단 경로
- 정점 u와 정점 v를 연결하는 경로 중 간선들의 가중치 합이 최소가 되는 경로
- 가중치는 가중치 인접 행렬인 2차원 배열에 저장된다.
  구현에서 간선이 존재하지 않으면 상당히 큰 값을 매겨 무한대라고 생각하고 가중치 인접 행렬에 저장한다.

Dijkstra의 최단 경로 알고리즘
- 네트워크에서 하나의 시작 정점으로부터 모든 다른 정점까지의 최단 경로를 찾는 알고리즘이다.
- 시작 정점에서 집합 S에 있는 정점만을 거쳐서 다른 정점으로 가는 최단 거리를 기록하는 배열이 반드시 있어야한다. (집합 S에는 최단 거리에 해당하는 정점이 추가된다.)

- 최단거리를 기록하는 1차원 배열(distance)을 설정. 시작 정점을 v, ditance[v] = 0, 다른 정점에 대한 distance 값은 시작 정점과 해당 정점 간의 가중치이다.
인접행렬(weight), 가중치는 distance[w] = weight[v][w]

- 정점 v 에서 w 간에 직접 간선이 없을 경우 무한대값을 저장. S= {v}에서 시작하여 최단 거리가 발견되는 정점들이 S에 하나씩 추가 될 것이다.

- 매 단계에서 집합 S 안에 있지 않은 정점 중에서 가장 distance 값이 작은 정점을 S에 추가. 새로운 정접 u가 S에 추가되면, S에 있지 않은 다른 정점들의 distance 값을 수정한다. 시작 기준점이 u로 바뀌었기 때문에, 새로 추가된 정점 u를 거쳐서 정점까지 가는 거리의 기존의 거리를 비교한다. 그 후 더 작은 거리값을 기준으로 distance 값을 수정한다.
  => distance[w] = min(distance[w], distance[u] + weight[u][w]


우선순위 큐를 사용함으로써 속도향상을 기대할 수 있다.