트리
- 개념
 1) 트리는 하나의 루트 노드를 갖는다.
 2) 루트 노드는 0개 이상의 자식 노드를 갖는다.
 3) 비선형 자료구조로 계층적 관계를 표현
 4) 사이클이 없는 하나의 연결 그래프

- 관련 용어
 1) 루트 노드(root node) : 부모가 없는 노드
 2) 단말 노드(leaf node) : 자식이 없는 노드
 3) 간선(edge) : 노드를 연결하는 선
 4) 형제 : 같은 부모를 가지는 노드
 5) 노드의 크기 : 자신을 포함한 모든 자손 노드의 개수
 6) 노드의 깊이 : 루트에서 어떤 노드에 도달하기 위해 거쳐야하는 간선의 수
 7) 노드의 레벨 : 트리의 특정 깊이를 가지는 노드의 집합
 8) 노드의 차수(degree) : 하위 트리 개수
 9) 트리의 차수 : 트리의 최대 차수
 10) 트리의 높이(height) : 루트 노드에서 가장 깊숙히 있는 노드의 깊이

- 특징
 1) 그래프의 한 종류로, '최소 연결 트리'라고 한다.
 2) 계층 모델이다.
 3) 루트에서 어떤 노드로 가는 경로는 유일하다.
 4) 한 개의 루트 노드만이 존재, 모든 자식 노드는 한개의 부모만 가짐
 5) 순회 : pre-order, in-order, post-order
 6) 이진트리, 이진 탐색 투리, 균형트리(AVL, red-black) 이진 힙 등

- 이진 트리(Binary Tree)
 1) 각 노드가 최대 두개의 자식을 갖는 트리
 2) 이진 트리 순회
    a. 중위순회(in-order): 왼쪽 -> 현재 -> 오른쪽
    b. 전위순회(pre-order): 현재 -> 왼쪽 -> 오른쪽
    c. 후위순회(post-order): 왼쪽 -> 오른쪽 -> 현재

- 이진 탐색 트리(Binary Search Tree)
 1) 왼쪽 자식들 <= n < 오른쪽 자식들  (모든 노드에서 n은 반드시 참)

- 균형트리
 1) O(logN) 시간에 insert, find를 할 수 있다.
 2) ex) 레드-블랙 트리, AVL 트리

- 완전 이진 트리(Complete Binary Tree)
 1) 마지막 레벨을 제외하고 모든 레벨이 완전히 채워져 있다.
 2) 마지막 레벨은 왼쪽에서 오른쪽을 채워져있어야 한다.
 3) 마지막 레벨h는 (1~2h-1)개의 노드를 가질 수 있다.
 4) 배열을 사용해 효율적 표현 가능

- 전 이진트리(Full Binary Tree)
 1) 모든 누드가 0개 또는 2개의 자식을 갖는 트리

- 포화 이지 트리(Perfect Binary Tree)
 1) 전 이진트리면서 완전 이진 트리일 경우
 2) 노드의 개수가 2^(k-1)개 (k : 트리의 높이)

- 최소힙
 1) key(부모 노드) >= key(자식 노드)인 완전 이진 트리
 2) 가장 큰 값은 루트 노드
 3) 높이 logn : n개 노드

- 최대힙
 1) 원소가 내림차순으로 정렬
 2) 각 노드의 원소가 자식들의 원소보다 작다.


- 트리의 구현 방법
 1) 인접 배열 이용
   a. 1차원 배열에 자신의 부모 노드만 저장.
   b. 이진 트리의 경우, 2차원 배열에 자식 노드를 저장.
      - ex) A[i][0] 왼쪽 자식 노드, a=A[i][1] 오른쪽 자식 노드

 2) 인접 리스트 이용
   a. 가중치가 없는 트리의 경우
      - ArrayList<ArrayList> list = new ArrayList<>();
   b. 가중치가 있는 트리의 경우
      - class Node{int num, dist; // 노드 번호, 거리} 정의
      - ArrayList[] list = new ArrayList[정점의 수 + 1];